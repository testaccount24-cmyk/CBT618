/*rexx*/
do forever
  call api_vars
  call datos_para_el_hash
  call obtengo_hash
end
exit

datos_para_el_hash:
  address ispexec
  'addpop'
  'DISPLAY PANEL(PCSFP03)'
  if rc=8 then exit
  'rempop'
  select
    when P=1 then do
       RuleArray='MD5     '
       HashLength= d2f(16)
       Hash=copies(' ',16)
    end
    when P=2 then do
       RuleArray='SHA-1   '
       HashLength= d2f(20)
       Hash=copies(' ',20)
    end
    when P=3 then do
       RuleArray='RPMD-160'
       HashLength= d2f(20)
       Hash=copies(' ',20)
    end
    otherwise nop
  end
  address tso
  'alloc da('file') fi(@@@oo@@@) shr reuse'
  if rc>2 then do
     say 'error en alloc 'file' prog: PCSF04'
     exit 8
  end
  'execio * diskr @@@oo@@@(finis stem reg.'
  'free fi(@@@oo@@@)'
  text=''
  do i=1 to reg.0
    text=text||reg.i
    drop reg.i
  end
  textLength=d2f(length(text))
return

obtengo_hash:
    address linkpgm "CSNBOWH ReturnCode ReasonCode"       ,
                    "ExitDataLength ExitData"             ,
                    "RuleArrayCount RuleArray"            ,
                    "textLength text"                     ,
                    "ChainingVectorLength ChainingVector" ,
                    "HashLength Hash"
    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNDBOWH')

    Hash=c2x(Hash) ; tipo=RuleArray
    address ispexec
    'addpop'
    'DISPLAY PANEL(PCSFP04)'
    if rc=8 then exit
    'rempop'
return

api_vars:
  ReturnCode           = d2f(0)
  ReasonCode           = d2f(0)
  ExitData             = ''
  ExitDataLength       = d2f(0)
  RuleArrayCount       = d2f(1)
  ChainingVectorLength = d2f(128)
  ChainingVector       = copies(' ',128)
return
d2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)

ReturnValue: procedure
 parse arg retc , resc , val , func .
 if c2d(retc) <> 0 | c2d(Resc) <> 0 then do
     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)
     exit 8
 end
return retc
