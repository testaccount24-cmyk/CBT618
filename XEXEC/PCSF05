/*rexx*/
do forever
  call leo_pkds_en_tabla
  call datos_para_el_hash
  call obtengo_la_firma
end
exit

leo_pkds_en_tabla:
  'newstack'
   call pcsfpkds
   address ispexec
   'TBCREATE tabla NAMES(SEL label) REPLACE NOWRITE'
   'TBVCLEAR tabla'
   sel=' '
   tot=queued()
   do i=1 to tot
      pull label 'Ç' .
      'TBADD tabla'
   end
  'TBTOP tabla'
return

datos_para_el_hash:
  do until salir='si'
     call saco_panel_seleccion
  end
  select
    when P=1 then do
       RuleArray='MD5     '
       HashLength= d2f(16)
       Hash=copies(' ',16)
    end
    when P=2 then do
       RuleArray='SHA-1   '
       HashLength= d2f(20)
       Hash=copies(' ',20)
    end
    when P=3 then do
       RuleArray='RPMD-160'
       HashLength= d2f(20)
       Hash=copies(' ',20)
    end
    otherwise nop
  end
  address tso
  'alloc da('file') fi(@@@oo@@@) shr reuse'
  if rc>2 then do
     say 'error en alloc 'file' prog: PCSF05'
     exit 8
  end
  'execio * diskr @@@oo@@@(finis stem reg.'
  'free fi(@@@oo@@@)'
  text=''
  do i=1 to reg.0
    text=text||reg.i
    drop reg.i
  end
  textLength=d2f(length(text))
return

obtengo_la_firma:
    call api_vars_hash
    address linkpgm "CSNBOWH ReturnCode ReasonCode"       ,
                    "ExitDataLength ExitData"             ,
                    "RuleArrayCount RuleArray"            ,
                    "textLength text"                     ,
                    "ChainingVectorLength ChainingVector" ,
                    "HashLength Hash"
    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNDBOWH')
    Hashd=c2x(Hash) ; tipo=RuleArray

    call api_vars_sign
    address linkpgm "CSNDDSG ReturnCode ReasonCode"   ,
                    "ExitDataLength ExitData"         ,
                    "RuleArrayCount RuleArray"        ,
                    "PKAPrivateKeyIdentifierLength"   ,
                    "PKAPrivateKeyIdentifier"         ,
                    "HashLength Hash"                 ,
                    "SignatureFieldLength"            ,
                    "SignatureBitLength"              ,
                    "SignatureField"
    LongFirma=c2d(SignatureFieldLength)
    SignatureField=substr(SignatureField,1,LongFirma)
    Sig=c2x(SignatureField)
    ret=ReturnValue(ReturnCode,ReasonCode,'Firma 'Sig,'CSNDDSG')
    address ispexec
    Sig1=substr(Sig,1,64)
    Sig2=substr(Sig,65,64)
    Sig3=substr(Sig,129,64)
    Sig4=substr(Sig,193,64)
    Sig5=substr(Sig,257,64)
    Sig6=substr(Sig,321,64)
    Sig7=substr(Sig,385,64)
    Sig8=substr(Sig,449,64)
    'addpop'
    'DISPLAY PANEL(PCSFP07)'
    'rempop'
return

api_vars_hash:
  ReturnCode           = d2f(0)
  ReasonCode           = d2f(0)
  ExitData             = ''
  ExitDataLength       = d2f(0)
  RuleArrayCount       = d2f(1)
  ChainingVectorLength = d2f(128)
  ChainingVector       = copies(' ',128)
return
api_vars_sign:
  long=1000 /* como no se la longitud del modulo a priori, pongo */
            /* un valor grande 1000, si es menor no importa      */
            /* porque luego lo recojo con su longitud correcta   */
  ReturnCode           = d2f(0)
  ReasonCode           = d2f(0)
  ExitData             = ''
  ExitDataLength       = d2f(0)
  RuleArrayCount       = d2f(1)
  RuleArray            = 'ISO-9796'
  PKAPrivateKeyIdentifierLength = d2f(64)
  PKAPrivateKeyIdentifier = keypka  /* clave recogida del panel */
  SignatureFieldLength = d2f(long)
  SignatureBitLength   = d2f(0)
  SignatureField       = copies(' ',long)
return
d2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)

ReturnValue: procedure
 parse arg retc , resc , val , func .
 if c2d(retc) <> 0 | c2d(Resc) <> 0 then do
     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)
     exit 8
 end
return retc

saco_panel_seleccion:
   P=''
   address ispexec
   'TBTOP tabla'
   'TBDISPL tabla PANEL(PCSFP05)'
   if rc=8 then exit 8
   if ZTDSELS ¬= 1  then do
      'addpop'
      'display panel(PCSFP06)'
      'rempop'
   end
   else do
     'TBDELETE tabla'
     'TBMOD tabla'
     keypka=label
     salir='si'
   end
return
